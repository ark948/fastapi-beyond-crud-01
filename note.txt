> fastapi dev src/


IMPORTANT: env> database connection url must not be DATABASE_URL
i changed it to DB_URL and it worked





VERY IMPORTANT:
Column from sqlmodel is from pydantic and will raise errors later in retrieving data
sa_column from sqlalchemy must be used with it. (look at created_at and updated_at fields in book model)
commit: 0001 fix



when creating a model, in datetime fields such as publilshed_date, we insert date object
when retrieving, we get back str (in schema)
this is the way that should be
SUMMARY: inserting datetimes published_date field (and similar fields) must be str (in schema)
        inserting (in service, we'll use datetime.strptime)
        getting back must be always date (in schema)
generally: model fields and schema fields must be of the same type




psql commands:
> \list (list all databases)
> \c <db name> (connect to a db)
> \dt (list tables)
> select * from <table name> where false; (a select that will return nothing, just to see all column names)


{
  "first_name": "test",
  "last_name": "user",
  "username": "user1",
  "email": "test1@test.com",
  "password": "test1234"
}


{
  "first_name": "john",
  "last_name": "doe",
  "username": "johndoe",
  "email": "johndoe@co.com",
  "password": "test1234"
}


{
    "username": "carl1",
    "email": "carl1@co.com",
    "first_name": "Carl",
    "last_name": "Johnson",
    "password": "test123"
}


8.17

> pip install pyjwt

NOTE: after introducing alembic lifespan event is no longer needed for creating database (for other things may be required)

- adding Redis
> installing redis client
> pip install aioredis
- create redis.py in db folder
- add some stuff to env file
- install redis/redis-stack docker image
> docker run -p 6379:6379 -it redis/redis-stack:latest



- Role Based Access Control (RBAC)
- we will implement two roles (admin, users)
- admins will be able to do anything and crud on users
- users will have crud on their own books, reviews and account



relations:
user -> book (one-to-many)

user -> review (one-to-many)
book -> review (one-to-many)


- error handling
fastapi needs a 'exception handler' to be able to return exceptions as errors